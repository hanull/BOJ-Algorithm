import java.io.*;
import java.util.*;

public class Main {
  static int n,l;
  static int[][] map1, map2; // 가로 맵, 세로 맵
  static int result=0;
  static int[] tmp;
  
  public static void isPossible(int index, int[][] arr) {
    tmp=new int[n];
    for(int i=0; i<n-1; i++) {
      // 현재의 높이와 다음의 높이가 다를 경우에만 체크해준다.
      if(arr[index][i]!=arr[index][i+1]) {
        int diff = arr[index][i]-arr[index][i+1];
        if(diff!=1&&diff!=-1) return; // 높이의 차이가 1보다 크면 갈 수 없는 길이다.
        if(diff==-1) { // 높은 칸을 만날 경우. 왼쪽 경사로
          for(int j=0; j<l; j++) {
            if(i-j<0||tmp[i-j]==1) return;
            if(arr[index][i]==arr[index][i-j]) tmp[i-j] = 1;
            else return;
          }
        }
        else { // 낮은 칸을 만날 경우. 오른쪽 경사로
          for(int j=1; j<=l; j++) {
            if(i+j>=n||tmp[i+j]==1) return;
            if(arr[index][i]-1==arr[index][i+j]) tmp[i+j] = 1;
            else return;
          }
        }
      }
    }
    result++;
  } 
  
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n=Integer.parseInt(st.nextToken());
    l=Integer.parseInt(st.nextToken());
    map1=new int[n][n];
    map2=new int[n][n];
    for(int i=0; i<n; i++) {
      st=new StringTokenizer(br.readLine());
      for(int j=0; j<n; j++) {
        map1[i][j]=map2[j][i]=Integer.parseInt(st.nextToken());
      }
    }
    for(int i=0; i<n; i++) {
      isPossible(i,map1); // 가로줄
      isPossible(i,map2); // 세로줄
    }
    System.out.println(result);
  }
}
