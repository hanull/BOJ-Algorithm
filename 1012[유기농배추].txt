import java.util.*;

public class Main {
  static int[] dx = {-1,1,0,0};
  static int[] dy = {0,0,1,-1};
  static int[][] map;
  static boolean[][] visited;
  public static void bfs(int x, int y, int m, int n) {
    Queue<Pair> q = new LinkedList<>();
    q.add(new Pair(x, y));
    visited[x][y] = true;
    while(!q.isEmpty()) {
      Pair tmp = q.poll();
      int tx = tmp.x;
      int ty = tmp.y;
      for(int i=0; i<4; i++) {
        int nx = tx + dx[i];
        int ny = ty + dy[i];
        if(nx<0||nx>=m||ny<0||ny>=n) continue;
        if(map[nx][ny]==1&&visited[nx][ny]==false) {
          q.add(new Pair(nx, ny));
          visited[nx][ny] = true;
        }
      }
      
    }
  }
  public static class Pair{
    int x , y;
    public Pair(int x ,int y) {
      this.x = x;
      this.y = y;
    }
  }
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    while(t-->0) {
      int m = sc.nextInt();
      int n = sc.nextInt();
      int k = sc.nextInt();
      map = new int[m][n];
      visited = new boolean[m][n];
      for(int i=0; i<k; i++) {
        int x = sc.nextInt();
        int y = sc.nextInt();
        map[x][y] = 1;
      }
      int cnt = 0;
      for(int i=0; i<m; i++) {
        for(int j=0; j<n; j++) {
          if(map[i][j]==1&&visited[i][j]==false) {
            bfs(i,j,m,n);
            cnt++;
          }
        }
      }
      System.out.println(cnt);
    }// end while();
  }
}
