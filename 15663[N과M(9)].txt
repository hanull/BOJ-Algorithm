import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

class Result implements Comparable<Result>{
  Integer[] a ;
  public Result(ArrayList<Integer> a) {
    this.a = a.toArray(new Integer[a.size()]);
  }
  int get(int index) {
    return this.a[index];
  }
  @Override
  public boolean equals(Object obj) {
      if (obj instanceof Result) {
          Result that = (Result)obj;
          int n = this.a.length;
          for (int i=0; i<n; i++) {
              if (this.a[i] != that.a[i]) {
                  return false;
              }
          }
          return true;
      } else {
          return false;
      }
  }
  @Override
  public int compareTo(Result that) {
    int n = this.a.length;
    for(int i=0; i<n; i++) {
      if(this.a[i]== that.a[i]) continue;
      if(this.a[i]< that.a[i]) return -1;
      if(this.a[i]> that.a[i]) return 1;
    }
    return 0;
  }
}
public class Main {
  static int N,M,num[], out[];
  static boolean[] check;
  static ArrayList<Result> d = new ArrayList<>();
  
  public static void go(int idx) {
    if(idx==M) {
      ArrayList<Integer> tmp = new ArrayList<>();
      for(int i=0; i<M; i++) {
        tmp.add(out[i]);
      }
      d.add(new Result(tmp));
      return;
    }
    for(int i=0; i<N; i++) {
      if(check[i]!=true) {
        check[i]=true;
        out[idx] = num[i];
        go(idx+1);
        check[i] = false;
      }
    }  
  }
  
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    N = sc.nextInt();
    M = sc.nextInt();
    num = new int[N];
    out = new int[M];
    check = new boolean[N];
    for(int i=0; i<N; i++) {
      num[i] = sc.nextInt();
    }
    Arrays.sort(num);
    go(0);
    Collections.sort(d);
    StringBuilder sb = new StringBuilder();
    for(int i=0; i<d.size(); i++) {
      if(i==0||!d.get(i).equals(d.get(i-1))) {
        for(int j=0; j<M; j++) {
          sb.append(d.get(i).get(j)+" ");
        }sb.append("\n");
      }
    }
    System.out.print(sb);
  }
}