import java.io.*;
import java.util.*;

public class Main {
  static int n,m,v; // 정점, 간선
  static ArrayList<ArrayList<Integer>> list = new ArrayList<>();
  static boolean[] visited;
  
  public static void dfs(int index) {
    if(!visited[index]) {
      visited[index]=true;
      System.out.print(index+" ");
      for(Integer k : list.get(index)) {
        if(!visited[k]) {
          dfs(k);
        }
      }
    }
  }
  
  public static void bfs(int index) {
    Queue<Integer> q = new LinkedList<Integer>();
    visited=new boolean[n+1];
    q.add(index);
    visited[index]=true;
    while(!q.isEmpty()) {
      int tmp = q.poll();
      System.out.print(tmp+" ");
      for(int i=0; i<list.get(tmp).size(); i++) {
        if(visited[list.get(tmp).get(i)]) continue;
        else {
          q.add(list.get(tmp).get(i));
          visited[list.get(tmp).get(i)]=true;
        }
      }
    }
  }

  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n=Integer.parseInt(st.nextToken());
    m=Integer.parseInt(st.nextToken());
    v=Integer.parseInt(st.nextToken());
    visited=new boolean[n+1];
    for(int i=0; i<=n; i++) {
      list.add(new ArrayList<>());
    }
    for(int i=1; i<=m; i++) {
      st=new StringTokenizer(br.readLine());
      int a=Integer.parseInt(st.nextToken());
      int b=Integer.parseInt(st.nextToken());
      list.get(a).add(b);
      list.get(b).add(a);
    }
    for(int i=1; i<=n; i++) {
      Collections.sort(list.get(i));
    }
    dfs(v);
    System.out.println();
    bfs(v);
  } 
}
