import java.util.*;
import java.io.*;

public class Main {
  static int n;
  static int[] num; // 수열
  static ArrayList<Integer> arr = new ArrayList<>(); // 연산자 순서 저장
  static int[] op=new int[4]; // +, -, *, / 갯수 저장
  static int max = Integer.MIN_VALUE;
  static int min = Integer.MAX_VALUE;
  
  public static void dfs(int cnt) {
    if(cnt==n-1) {
      cal();
      return;
    }
    for(int i=0; i<4; i++) {
      if(op[i]!=0) {
        arr.add(i);
        op[i]--;
        dfs(cnt+1);
        arr.remove(arr.size()-1);
        op[i]++;
      }
    }
  }
  
  public static void cal() {
    int total=num[0];
    for(int i=0; i<n-1; i++) {
      if(arr.get(i)==0) {
        total+=num[i+1];
      }else if(arr.get(i)==1) {
        total-=num[i+1];
      }else if(arr.get(i)==2) {
        total*=num[i+1];
      }else {
        total/=num[i+1];
      }
    }
    if(total>max) max=total;
    if(total<min) min=total;
  }
  
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    n = Integer.parseInt(br.readLine());
    num = new int[n];
    StringTokenizer st = new StringTokenizer(br.readLine());
    for(int i=0; i<n; i++) {
      num[i] = Integer.parseInt(st.nextToken());
    }
    st = new StringTokenizer(br.readLine());
    for(int i=0; i<4; i++) {
      op[i] = Integer.parseInt(st.nextToken());
    }
    dfs(0);
    System.out.println(max);
    System.out.println(min);
  }
}
