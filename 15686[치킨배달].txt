import java.io.*;
import java.util.*;

public class Main {
  static int n,m;
  static int[][] map;
  static ArrayList<Pair> store = new ArrayList<>();
  static ArrayList<Pair> home = new ArrayList<>();
  static ArrayList<Integer> arr = new ArrayList<>(); // 선택한 치킨집의 index 저장
  static int min = Integer.MAX_VALUE;
  
  public static void dfs(int index, int cnt) {
    if(cnt==m) {
      int total = dist();
      if(total<min) min = total;
      return;
    }
    if(index==store.size()) return;
    // 선택하지 않을 경우,
    dfs(index+1, cnt);
    // index번째 치킨집을 선택할 경우,
    arr.add(index);
    dfs(index+1,cnt+1);
    arr.remove(arr.size()-1);
  }
  
  public static int dist() {
    int total = 0;
    for(int i=0; i<home.size(); i++) {
      int hx = home.get(i).x;
      int hy = home.get(i).y;
      int d=Integer.MAX_VALUE;
      for(int j=0; j<arr.size(); j++) {
        int sx = store.get(arr.get(j)).x;
        int sy = store.get(arr.get(j)).y;
        d = Math.min(d, Math.abs(hx-sx)+Math.abs(hy-sy));
      }
      total+=d;
    }
    return total;
  }
  
  public static class Pair{
    int x,y;
    public Pair(int x, int y) {
      this.x=x;
      this.y=y;
    }
  }
  
  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n = Integer.parseInt(st.nextToken());
    m = Integer.parseInt(st.nextToken());
    map = new int[n+1][n+1];
    for(int i=1; i<=n; i++) {
      st = new StringTokenizer(br.readLine());
      for(int j=1; j<=n; j++) {
        map[i][j] = Integer.parseInt(st.nextToken());
        if(map[i][j]==1) {
          home.add(new Pair(i, j));
        }else if(map[i][j]==2) {
          store.add(new Pair(i, j));
        }
      }
    }
    dfs(0,0);
    System.out.println(min);
  }
}
