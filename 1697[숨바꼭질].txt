import java.util.*;
import java.io.*;
public class Main {
  static int N,K;
  static int[] dx= {0,1,2};
  static boolean[] check = new boolean[100001];
  static int[] result= new int[100001];
  public static void bfs(int start, int goal) {
    Queue<Integer> q = new LinkedList<>();
    q.add(start);
    check[start] = true;
    result[start]=0;
    while(!q.isEmpty()) {
      int tmp = q.poll();
      if(tmp==goal) {
        System.out.println(result[tmp]);
        break;
      }
      for(int i=0; i<3; i++) {
        int nx;
        switch (dx[i]) {
        case 0:
          nx = tmp-1;
          break;
        case 1:
          nx = tmp+1;
          break;
        default:
          nx = tmp*2;
          break;
        }
        if(nx<0||nx>100000) continue;
        if(check[nx]==false) {
          q.add(nx);
          check[nx]=true;
          result[nx] = result[tmp]+1; 
        }
      }
    }
  }
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String[] line = br.readLine().split(" ");
    N = Integer.parseInt(line[0]);
    K = Integer.parseInt(line[1]);
    bfs(N,K);

  }

}