import java.io.*;
import java.util.*;

public class Main {
  static int r,c,m;
  static int[][] map;
  static int[] dx= {0,-1,1,0,0};  // 1인 경우는 위, 2인 경우는 아래, 3인 경우는 오른쪽, 4인 경우는 왼쪽
  static int[] dy= {0,0,0,1,-1};
  static PriorityQueue<Pair> fish = new PriorityQueue<>();
  static int total=0;
  public static void solve() {
    for(int t=1; t<=c; t++) {
      // 낚시 시작
      Queue<Pair> q = new LinkedList<>();
      while(!fish.isEmpty()) {
        Pair tmp = fish.poll();
        int x=tmp.x;
        int y=tmp.y;
        int size=tmp.size;
        if(tmp.y==t) { // 잡히는 물고기 
          total+=tmp.size;
        }else {
          map[x][y]=size;   
          q.add(tmp);
        }
      }
      fish.addAll(q);
      
      // 물고기 이동
      while(!fish.isEmpty()) {
        Pair tmp = fish.poll();
        int tx=tmp.x;
        int ty=tmp.y;
        int nx=tx;
        int ny=ty;
        int speed=tmp.speed;
        int d=tmp.direction;
        int size=tmp.size;
        for(int i=0; i<speed; i++) { // 속도만큼 칸을 이동
          nx=tx+dx[d];
          ny=ty+dy[d];
          if(nx<0||nx>r-1||ny<0||ny>c-1) { // 벽을 만나면, 방향 전환
            if(d==1) d=2;
            else if(d==2) d=1;
            else if(d==3) d=4;
            else d=3;
            continue;
          }
        }
        if(map[nx][ny]<size)
        q.add(new Pair(nx, ny, speed, d, size));
      }
      fish.addAll(q);
    }// end 낚시왕 이동();
  }
  public static class Pair implements Comparable<Pair>{
    int x,y,speed,direction,size;
    public Pair(int x, int y,int speed, int direction, int size) {
      this.x=x;
      this.y=y;
      this.speed=speed;
      this.direction=direction;
      this.size=size;
    }
    @Override
    public int compareTo(Pair other) {
      if(y==other.y) {
        return Integer.compare(x, other.x);
      }
      return Integer.compare(y, other.y);
    }
  }
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    r=Integer.parseInt(st.nextToken());
    c=Integer.parseInt(st.nextToken());
    m=Integer.parseInt(st.nextToken());
    for(int i=0; i<m; i++) {
      st=new StringTokenizer(br.readLine());
      int a=Integer.parseInt(st.nextToken());
      int b=Integer.parseInt(st.nextToken());
      int c=Integer.parseInt(st.nextToken());
      int d=Integer.parseInt(st.nextToken());
      int e=Integer.parseInt(st.nextToken());
      fish.add(new Pair(a,b,c,d,e));
    }
    solve();
    System.out.println(total);
  }
}
