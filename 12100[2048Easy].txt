import java.io.*;
import java.util.*;

public class Main{
  static int N;
  static int[][] map;
  static int Max = Integer.MIN_VALUE;
  
  public static void shift(int index) {
    Queue<Integer> q = new LinkedList<>();
    switch (index) {
      // 위
      case 0:
        for(int i=0; i<N; i++) {
          for(int j=0; j<N; j++) {
            if(map[j][i]!=0) {
              q.add(map[j][i]);
            }
            map[j][i] = 0;
          }
          int k = 0;
          while(!q.isEmpty()) {
            int tmp = q.poll();
            if(map[k][i]==0) {
              map[k][i]= tmp;
            }
            else if(map[k][i]==tmp) {
              map[k][i] = tmp*2;
              k++;
            }
            else {
              k++;
              map[k][i] = tmp;
            }
          }
        }
        break;
      // 아래
      case 1:
        for(int i=0; i<N; i++) {
          for(int j=N-1; j>=0; j--) {
            if(map[j][i]!=0) {
              q.add(map[j][i]);
            }
            map[j][i] = 0;
          }
          int k = N-1;
          while(!q.isEmpty()) {
            int tmp = q.poll();
            if(map[k][i]==0) {
              map[k][i]= tmp;
            }
            else if(map[k][i]==tmp) {
              map[k][i] = tmp*2;
              k--;
            }
            else {
              k--;
              map[k][i] = tmp;
            }
          }
        }    
        break;
      // 오른쪽
      case 2:
        for(int i=0; i<N; i++) {
          for(int j=N-1; j>=0; j--) {
            if(map[i][j]!=0) {
              q.add(map[i][j]);
            }
            map[i][j] = 0;
          }
          int k = N-1;
          while(!q.isEmpty()) {
            int tmp = q.poll();
            if(map[i][k]==0) {
              map[i][k]= tmp;
            }
            else if(map[i][k]==tmp) {
              map[i][k] = tmp*2;
              k--;
            }
            else {
              k--;
              map[i][k] = tmp;
            }
          }
        }
        break;
      // 왼쪽
      case 3:
        for(int i=0; i<N; i++) {
          for(int j=0; j<N; j++) {
            if(map[i][j]!=0) {
              q.add(map[i][j]);
            }
            map[i][j] = 0;
          }
          int k = 0;
          while(!q.isEmpty()) {
            int tmp = q.poll();
            if(map[i][k]==0) {
              map[i][k]= tmp;
            }
            else if(map[i][k]==tmp) {
              map[i][k] = tmp*2;
              k++;
            }
            else {
              k++;
              map[i][k] = tmp;
            }
          }
        }
        break;
    }
  }
  public static void dfs(int cnt) {
    if(cnt==5) {
      for(int i=0; i<N; i++) {
        for(int j=0; j<N; j++) {
          if(map[i][j]>Max) Max = map[i][j];
        }
      }
      return;
    }
    
    // 처음 정보 복사.
    int[][] copymap = new int[N][N];
    for(int i=0; i<N; i++) {
      for(int j=0; j<N; j++) {
        copymap[i][j] = map[i][j];
      }
    }
    
    // 위,아래,오른쪽, 왼쪽으로 합치기
    for(int i=0; i<4; i++) {
      // 이동(상,하,좌,우)
      shift(i);
      dfs(cnt+1);
      // 원래 정보로 복구
      for(int p=0; p<N; p++) {
        for(int q=0; q<N; q++) {
          map[p][q] = copymap[p][q];
        }
      }
    }
  }
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    N = Integer.parseInt(br.readLine());
    map = new int[N][N];
    for(int i=0; i<N; i++) {
      String[] line = br.readLine().split(" ");
      for(int j=0; j<N; j++) {
        map[i][j] = Integer.parseInt(line[j]);
      }
    }
    dfs(0);
    System.out.println(Max);
  }
}
