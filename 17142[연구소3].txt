import java.io.*;
import java.util.*;

public class Main {
  static int n,m;
  static ArrayList<Pair> virus = new ArrayList<>();
  static ArrayList<Pair> selected = new ArrayList<>();
  static int[][] map, copymap;
  static boolean[][] visited;
  static int[] dx= {-1,1,0,0};
  static int[] dy= {0,0,-1,1};
  static int result = Integer.MAX_VALUE;
  static int blank=0;
  public static void dfs(int index, int cnt) {
    if(cnt==m) { // 바이러스 m개를 뽑고, bfs로 바이러스를 퍼트린다.
      copy();
      spread();
      return;
    }
    for(int i=index; i<virus.size(); i++) {
      selected.add(virus.get(i));
      dfs(i+1,cnt+1);
      selected.remove(selected.size()-1);
    }
  }
  public static void copy() {
    copymap = new int[n][n];
    for(int i=0; i<n; i++) {
      for(int j=0; j<n; j++) {
        copymap[i][j]=map[i][j];
      }
    }
  }
  public static void spread() {
    Queue<Pair> q = new LinkedList<>();
    q.addAll(selected);
    visited = new boolean[n][n];
    int val=0;
    int c=0;
    while(!q.isEmpty()) {
      int size=q.size();
      if(blank==c) break;
      while(size-->0) {
        Pair tmp = q.poll();
        int tx=tmp.x;
        int ty=tmp.y;
        visited[tx][ty]=true;
        for(int j=0; j<4; j++) {
          int nx=tx+dx[j];
          int ny=ty+dy[j];
          if(nx<0||nx>n-1||ny<0||ny>n-1) continue;
          if(visited[nx][ny]==true||copymap[nx][ny]==1) continue;
          // 비활성화 바이러스이거나, 빈칸(0)일 때,
          visited[nx][ny]=true;
          if(copymap[nx][ny]==0) {
            c++;
            q.add(new Pair(nx, ny));
          }else {
            q.add(new Pair(nx, ny));
          }
        }
      }
      val++;
    }
    if(blank==c) {
      if(result>val) {
        result=val;
      }
    }else {
      val=Integer.MAX_VALUE;
    }
  }
  
  public static class Pair{
    int x,y;
    public Pair(int x, int y) {
      this.x=x;
      this.y=y;
    }
  }
  
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n=Integer.parseInt(st.nextToken());
    m=Integer.parseInt(st.nextToken());
    map=new int[n][n];
    for(int i=0; i<n; i++) {
      st=new StringTokenizer(br.readLine());
      for(int j=0; j<n; j++) {
        map[i][j]=Integer.parseInt(st.nextToken());
        if(map[i][j]==2) virus.add(new Pair(i,j));
        if(map[i][j]==0) blank++;
      }
    }
    dfs(0,0);
    if(result==Integer.MAX_VALUE) {
      System.out.println("-1");
    }else {
      System.out.println(result);
    }
  }
}
