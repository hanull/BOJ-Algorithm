import java.io.*;
import java.util.*;

public class Solution {
  static int n,w,h;
  static int[][] map;
  static int block;
  static int[] dx= {-1,1,0,0};
  static int[] dy= {0,0,-1,1};
  
  public static void dfs(int cnt) {
    // 구슬 다 사용하면, 남은 벽돌수 카운트
    if(cnt==n) {
      int total=Count();
      if(block>total) block = total;
      return;
    }
    // 맵 정보 복사
    int[][] copymap = new int[h][w];
    for(int i=0; i<h; i++) {
      for(int j=0; j<w; j++) {
        copymap[i][j] = map[i][j];
      }
    }
    for(int i=0; i<w; i++) {
      go(i);
      dfs(cnt+1);
      for(int a=0; a<h; a++) {
        for(int b=0; b<w; b++) {
          map[a][b] = copymap[a][b];
        }
      }
    }
  }
  // 벽돌 깨기
  public static void go(int index) {
    Queue<Pair> q = new LinkedList<>();
    // 인덱스 위치의 가장 위에 위치한 벽돌 선택
    for(int i=0; i<h; i++) {
      if(map[i][index]!=0) {
        q.add(new Pair(i, index,map[i][index]));
        break;
      }
    }
    // 벽돌의 크기만큼 상,하,좌,우로 깨짐
    // 깰 수 없을때 까지 반복
    while(!q.isEmpty()) {
      Pair tmp = q.poll();
      int tx = tmp.x;
      int ty = tmp.y;
      int num = tmp.num;
      map[tx][ty]=0;
      // num만큼 상,하,좌,우로 이동
      // 블록 제거
      for(int i=0; i<4; i++) {
        int nx = tx;
        int ny = ty;
        for(int j=0; j<num-1; j++) {
          nx+=dx[i];
          ny+=dy[i];
          if(nx<0||nx>h-1||ny<0||ny>w-1) continue;
          if(map[nx][ny]!=0){
            q.add(new Pair(nx, ny, map[nx][ny]));
          }       
        }   
      }
    }
  } // end go();
  
  public static int Count() {
    int total = 0;
    for(int i=0; i<h; i++) {
      for(int j=0; j<w; j++) {
        if(map[i][j]!=0) {
          total+=1;
        }
      }
    }
    return total;
  }
  
  public static class Pair{
    int x, y, num;
    public Pair(int x, int y, int num) {
      this.x=x;
      this.y=y;
      this.num=num;
    }
  }
  
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int tc = Integer.parseInt(br.readLine());
    for(int t=1; t<=tc; t++) {
      StringTokenizer st = new StringTokenizer(br.readLine());
      n= Integer.parseInt(st.nextToken());
      w= Integer.parseInt(st.nextToken());
      h= Integer.parseInt(st.nextToken());
      map = new int[h][w];
      block=Integer.MAX_VALUE;
      for(int i=0; i<h; i++) {
        String[] line = br.readLine().split(" ");
        for(int j=0; j<w; j++) {
          map[i][j] = Integer.parseInt(line[j]);
        }
      }
      dfs(0);
      System.out.println("#"+t+" "+block);
    }// end testcase();
  }
}
