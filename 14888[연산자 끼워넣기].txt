import java.util.Arrays;
import java.util.Scanner;

public class Main {
  static int N;
  static int[] num;
  static int[] operater;  // [1]->+, [2]->-, [3]->*, [4]->/ 
  static int[] arr;          //  연산자로 만든 순열
  static long min=Long.MAX_VALUE;
  static long max=Long.MIN_VALUE;
  
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    N = sc.nextInt();
    num = new int[N];
    operater = new int[4];
    
    // 숫자 입력
    for(int i=0; i<N; i++) {
      num[i] = sc.nextInt();
    }
    // 연산자 갯수 입력
    int cnt=0;
    for(int i=0; i<4; i++) {
      operater[i] = sc.nextInt();
      cnt++;
    }
    // 연산자의 모든 조합을 구하기 위해 1,2,3,4를 이용해 숫자배열로 만들기
    String str = "";
    for(int i=0; i<4; i++) {
      for(int j=0; j<operater[i]; j++) {
        str += i+1;
      }
    }
    arr=new int[str.length()];
    for(int i=0; i<arr.length; i++) {
      arr[i] = str.charAt(i)-'0';
    }
    // 오름차순으로 배열후, 최대값과 최소값 구하기
    Arrays.sort(arr);
    do {
      int total = cal();
      if(total>max) max = total;
      if(total<min) min = total;
    }while(nextpermutation());
    
    // output 
    System.out.println(max);
    System.out.println(min);
  } // end main()       
  
  
  public static int cal() {
    int result=num[0];
    for(int i=0; i<arr.length; i++) {
      switch (arr[i]) {
      case 1:
        result = result + num[i+1];
        break;
      case 2:
        result = result - num[i+1];
        break;
      case 3:
        result = result * num[i+1];
        break;
      default:
        result = result / num[i+1];
        break;
      }
    }
    return result;
  } // end cal();
  
  public static boolean nextpermutation() {
    int i = arr.length-1;
    while(i>0&&arr[i]<= arr[i-1]) i-=1;
    if(i<=0) return false;
    
    int j = arr.length-1;
    while(j>0&&arr[j]<=arr[i-1]) j-=1;
    
    int temp = arr[j];
    arr[j] = arr[i-1];
    arr[i-1] = temp;
    
    // 변경한 값 뒤쪽으로 오름차순으로 정렬
    j = arr.length-1;
    while(i<j) {
      int tmp = arr[j];
      arr[j] = arr[i];
      arr[i] = tmp;
      i+=1; j-=1;
    }
    return true;
  }// end nextpermutation();
  
}
