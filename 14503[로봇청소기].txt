package baekjoon;

import java.io.*;
import java.util.*;

public class Ex14503_로봇청소기 {
  static int n,m;
  static int[][] map;
  static int[] dx= {-1,0,1,0};  // 북, 동, 남, 서
  static int[] dy= {0,1,0,-1};
  static boolean[][] visited;
  static int cnt=1;
  static boolean flag=false;
  static boolean pass=false;
  public static void move(int x, int y, int d) {
    Queue<Pair> q = new LinkedList<>();
    q.add(new Pair(x, y, d));
    visited[x][y]=true; 
    map[x][y]=1;
    int direction=0;
    while(!q.isEmpty()) {
      Pair tmp = q.poll();
      int tx=tmp.x;
      int ty=tmp.y;
      int td=tmp.d;
      System.out.println(flag+" "+tx+" "+ty+" "+td);
      for(int i=0; i<4; i++) {
        if(flag) {
          flag=false;
          pass=false;
          td=turn(td,1); // 반대방향으로 180도 회전
        }else {
          td=turn(td,0); // 왼쪽으로 90도 회전
        }
        int nx=tx+dx[td];
        int ny=ty+dy[td];
        if(nx<0||nx>n-1||ny<0||ny>m-1) continue;
        //if(visited[nx][ny]) continue;
        if(map[nx][ny]==1) continue;
        while(true) { // 벽을 만날 때 까지 이동
          cnt++;
          map[nx][ny]=1;
          visited[nx][ny]=true;
          nx+=dx[td];
          ny+=dy[td];
          if(nx<0||nx>n-1||ny<0||ny>m-1) break;
          if(map[nx][ny]==1) {
            q.add(new Pair(nx-dx[td], ny-dy[td], td));
            flag=true;
            pass=true;
            break;
          }
        }
        if(pass) break;
      }
    }
    
  }
  
  public static int turn(int d, int f) {
    if(f==0) { // 90도 왼쪽으로 회전
      if(d==0) d=3;
      else if(d==3) d=2;
      else if(d==2) d=1;
      else d=0;
    }
    else { // 반대 방향으로 회전
      if(d==0) d=2;
      else if(d==2) d=0;
      else if(d==3) d=1;
      else d=3;
    }
    return d;
  }
  
  public static class Pair{
    int x,y,d;
    public Pair(int x, int y, int d) {
      this.x=x;
      this.y=y;
      this.d=d;
    }
  }
  
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n=Integer.parseInt(st.nextToken());
    m=Integer.parseInt(st.nextToken());
    map=new int[n][m];
    visited=new boolean[n][m];
    st=new StringTokenizer(br.readLine());
    int x=Integer.parseInt(st.nextToken());
    int y=Integer.parseInt(st.nextToken());
    int d=Integer.parseInt(st.nextToken());
    for(int i=0; i<n; i++) {
      st=new StringTokenizer(br.readLine());
      for(int j=0; j<m; j++) {
        map[i][j]=Integer.parseInt(st.nextToken());
      }
    }
    move(x,y,d);
    System.out.println(cnt);
  }
}
