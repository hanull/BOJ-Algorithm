import java.io.*;
import java.util.*;

public class Main{
  static int n,m;
  static int[][] map;
  static int[] dx= {-1,0,1,0};  // ºÏ, µ¿, ³², ¼­
  static int[] dy= {0,1,0,-1};
  static boolean[][] visited;
  static int cnt=1;
  static boolean flag=false;
  
  public static void solve(int x, int y,int d) {
    Queue<Pair> q = new LinkedList<Pair>();
    q.add(new Pair(x, y,d));
    map[x][y]=2;
    visited[x][y]=true;
    
    while(!q.isEmpty()) {
      Pair tmp = q.poll();
      int tx=tmp.x;
      int ty=tmp.y;
      int now_d=tmp.d;
      
      int next_d=now_d;
      flag=false;
      for(int i=0; i<4; i++) {
        next_d=turn(next_d,0);
        int nx=tx+dx[next_d];
        int ny=ty+dy[next_d];
        if(nx<0||nx>n-1||ny<0||ny>m-1) continue;
        if(map[nx][ny]==1||map[nx][ny]==2) continue;
        if(visited[nx][ny]) continue;
        flag=true;
        map[nx][ny]=2;
        visited[nx][ny]=true;
        cnt++;
        q.add(new Pair(nx, ny, next_d));
        break;
      }
      if(flag==false) {
        next_d=turn(now_d,1);
        int nx=tx+dx[next_d];
        int ny=ty+dy[next_d];
        if(nx<0||nx>n-1||ny<0||ny>m-1) continue;
        if(map[nx][ny]==1) continue;
        q.add(new Pair(nx, ny, now_d));
      }
    }
  }
  public static int turn(int d, int f) {
    if(f==0) {
      if(d==0) {
        d=3;
      }else if(d==1) {
        d=0;
      }else if(d==2) {
        d=1;
      }else {
        d=2;
      }
    }
    else {
      if(d==0) {
        d=2;
      }else if(d==1) {
        d=3;
      }else if(d==2) {
        d=0;
      }else { 
        d=1;
      }
    }
    
    return d;
  }
  public static class Pair{
    int x,y,d;
    public Pair(int x, int y,int d) {
      this.x=x;
      this.y=y;
      this.d=d;
    }
  }
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n=Integer.parseInt(st.nextToken());
    m=Integer.parseInt(st.nextToken());
    map=new int[n][m];
    visited=new boolean[n][m];
    st=new StringTokenizer(br.readLine());
    int x=Integer.parseInt(st.nextToken());
    int y=Integer.parseInt(st.nextToken());
    int d=Integer.parseInt(st.nextToken());
    for(int i=0; i<n; i++) {
      st=new StringTokenizer(br.readLine());
      for(int j=0; j<m; j++) {
        map[i][j]=Integer.parseInt(st.nextToken());
      }
    }
    solve(x,y,d);
    System.out.println(cnt);
  }
}
