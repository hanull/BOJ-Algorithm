import java.io.*;
import java.util.*;

public class Main {
  static int n,m;
  static int[][] map;
  static int[] dx= {-1,0,1,0};  // 북, 동, 남, 서
  static int[] dy= {0,1,0,-1};
  static boolean[][] visited;
  static int cnt=1;

  
  public static void move(int x, int y, int d) {
    Queue<Pair> q = new LinkedList<>();
    q.add(new Pair(x, y, d));
    visited[x][y]=true;
    map[x][y]=2;
    while(!q.isEmpty()) {
      Pair tmp = q.poll();
      int tx=tmp.x;
      int ty=tmp.y;
      int td=tmp.d;
      
      int nx=0;
      int ny=0;
      int n_direction=td;
      boolean flag=false;
      
      for(int i=0; i<4; i++) {
        n_direction=turn(n_direction,0);
        nx=tx+dx[n_direction];
        ny=ty+dy[n_direction];
        if(nx<0||nx>n-1||ny<0||ny>m-1) continue;
        if(map[nx][ny]==0&&visited[nx][ny]==false) { // 청소할 수 있는 칸이 존재,
          cnt++;
          map[nx][ny]=2;
          visited[nx][ny]=true;
          flag=true;
          q.add(new Pair(nx, ny, n_direction));
          break;
        }
      }
      if(!flag) { // 청소할 수 있는 칸이 없을 때, 후진
        n_direction=turn(td,1);
        nx=tx+dx[n_direction];
        ny=ty+dy[n_direction];
        if(nx<0||nx>n-1||ny<0||ny>m-1) continue;
        if(map[nx][ny]==0||map[nx][ny]==2) {
          q.add(new Pair(nx, ny, td));
        }
      }
    }
  }

  public static int turn(int d, int how) {
    if(how==0) {
      if(d==0) d=3;
      else if(d==3) d=2;
      else if(d==2) d=1;
      else d=0;
    }
    else {
      if(d==0) d=2;
      else if(d==3) d=1;
      else if(d==2) d=0;
      else d=3;
    }
    return d;
  }
  
  public static class Pair{
    int x,y,d;
    public Pair(int x, int y, int d) {
      this.x=x;
      this.y=y;
      this.d=d;
    }
  }
  
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n=Integer.parseInt(st.nextToken());
    m=Integer.parseInt(st.nextToken());
    map=new int[n][m];
    visited=new boolean[n][m];
    st=new StringTokenizer(br.readLine());
    int x=Integer.parseInt(st.nextToken());
    int y=Integer.parseInt(st.nextToken());
    int d=Integer.parseInt(st.nextToken());
    for(int i=0; i<n; i++) {
      st=new StringTokenizer(br.readLine());
      for(int j=0; j<m; j++) {
        map[i][j]=Integer.parseInt(st.nextToken());
      }
    }
    move(x,y,d);
    
    System.out.println(cnt);
  }
}
