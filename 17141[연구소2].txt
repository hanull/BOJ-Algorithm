import java.io.*;
import java.util.*;

public class Main {
  static int n,m;
  static int[][] map,copymap;
  static boolean[][] visited;
  static int[] dx= {-1,1,0,0};
  static int[] dy= {0,0,-1,1};
  static int result=Integer.MAX_VALUE;
  static ArrayList<Pair> virus = new ArrayList<>();
  static boolean[] arr=new boolean[10];
  
  public static void solve(int cnt, int index) {
    if(cnt==m) {  // 바이러스를 m개 선택
      for(int i=0; i<n; i++) {
        for(int j=0; j<n; j++) {
          copymap[i][j]=map[i][j];
        }
      }
      int t=spread();
      if(check()) {
        if(result>t) result=t;
      }
      init();
      return;
    }
    for(int i=index; i<virus.size(); i++) { // m개의 바이러스를 뽑음 
      arr[i]=true;
      map[virus.get(i).x][virus.get(i).y]=-1;
      solve(cnt+1,i+1);
      arr[i]=false;
      map[virus.get(i).x][virus.get(i).y]=0;
    }
  }
  
  public static int spread() { // 바이러스 확산
    Queue<Pair> q = new LinkedList<>();
    for(int i=0; i<virus.size(); i++) {
      if(arr[i]) {
        q.add(virus.get(i));
        visited[virus.get(i).x][virus.get(i).y]=true;
      }
    }
    int k=0;
    while(!q.isEmpty()) {
      int len=q.size();
      while(len-->0) {
        Pair tmp = q.poll();
        int tx=tmp.x;
        int ty=tmp.y;
        int time=tmp.time;
        k=time;
        for(int i=0; i<4; i++) {
          int nx=tx+dx[i];
          int ny=ty+dy[i];
          if(nx<0||nx>n-1||ny<0||ny>n-1) continue;
          if(visited[nx][ny])continue;
          if(map[nx][ny]==1) continue;
          q.add(new Pair(nx, ny,time+1));
          map[nx][ny]=time+1;
          visited[nx][ny]=true;
        }
      }
    }
    return k;
  }
  
  public static boolean check() {
    for(int i=0; i<n; i++) {
      for(int j=0; j<n; j++) {
        if(map[i][j]==0) return false;
      }
    }
    return true;
  }
  
  public static void init() {
    for(int i=0; i<n; i++) {
      for(int j=0; j<n; j++) {
        visited[i][j]=false;
        map[i][j]=copymap[i][j];
      }
    }
  }
  public static class Pair{
    int x,y,time;
    public Pair(int x, int y,int time) {
      this.x=x;
      this.y=y;
      this.time=time;
    }
  }
  public static void main(String[] args) throws Exception{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    n=Integer.parseInt(st.nextToken());
    m=Integer.parseInt(st.nextToken());
    map=new int[n][n];
    copymap=new int[n][n];
    visited=new boolean[n][n];
    for(int i=0; i<n; i++) {
      st=new StringTokenizer(br.readLine());
      for(int j=0; j<n; j++) {
        map[i][j]=Integer.parseInt(st.nextToken());
        if(map[i][j]==2) {
          virus.add(new Pair(i,j,0));
          map[i][j]=0;
        }
      }
    }
    solve(0, 0);
    if(result==Integer.MAX_VALUE) {
      System.out.println("-1");
    }else {
      System.out.println(result);
    }
  }
}
